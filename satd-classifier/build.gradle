buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.72'
}
repositories {
    jcenter()
    maven { url "https://dl.bintray.com/kotlin/ktor" }
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}
def ktor_version = '1.1.3'
def logback_version = '1.2.3'
def kotlin_version = '1.3.72'
kotlin {
    jvm(){
        withJava()
    }
//    js {
//        browser {
//        }
//    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation files('libs/src2abs-0.1-jar-with-dependencies.jar')

                implementation "io.ktor:ktor-server-netty:$ktor_version"
                implementation "io.ktor:ktor-html-builder:$ktor_version"
                implementation "ch.qos.logback:logback-classic:$logback_version"

                implementation 'org.eclipse.jgit:org.eclipse.jgit:5.4.2.201908231537-r'
                implementation 'com.github.javaparser:javaparser-core:3.15.1'
                implementation 'com.h2database:h2:1.4.200'
                implementation 'org.postgresql:postgresql:42.2.12'
                implementation 'org.jetbrains.exposed:exposed:0.17.6'
                implementation "org.jetbrains.kotlin:kotlin-script-runtime:$kotlin_version"
                implementation 'com.google.code.gson:gson:2.8.6'
                implementation group: 'com.xenomachina', name: 'kotlin-argparser', version: '2.0.7'

//                implementation 'org.webjars.bower:diff2html:2.11.2'
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
//        jsMain {
//            dependencies {
//                implementation kotlin('stdlib-js')
//            }
//        }
//        jsTest {
//            dependencies {
//                implementation kotlin('test-js')
//            }
//        }
    }
}

jvmJar {
//    dependsOn(jsBrowserProductionWebpack)
//    from(new File(jsBrowserProductionWebpack.entry.name, jsBrowserProductionWebpack.outputPath))
}

task step2(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.MainKt"
    //jvmArgs = ['-Xms1g', '-Xmx8g']
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task showdatabase(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.PersistenceKt"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task MainStartSqlConsole(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.MainStartSqlConsoleKt"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task oom(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.utils.OOMKt"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}

task guinea(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.utils.GuineaKt"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}

task removedb(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.MainRemoveDbKt"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task clone(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.MainCloneKt"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task removeCheckout(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.MainRemoveCheckoutKt"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task redoFailed(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.MainRedoFailedKt"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task repoStats(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.MainRepoStatsKt"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task updateDbStats(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.MainUpdateDbStatsKt"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task MainDbPostProcessing(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.MainDbPostProcessingKt"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}

task MainGenDatasetArgs(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.MainGenDatasetArgs"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
    args = []
    if(project.hasProperty('arguments')){
        args(arguments.split(' '))
    }
    // ./gradlew MainGenDatasetArgs -Parguments="--exit_status 5"
}

task MainGenDataset1(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.MainGenDataset1"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task MainGenDataset2(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.MainGenDataset2"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task MainGenDataset3(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.MainGenDataset3"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task MainGenAndEval(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.MainGenAndEval"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task MainDiff1(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.MainDiff1"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task MainDiff2(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.MainDiff2"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task MainTest1(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "sample.Test1"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task pgsqlBackup(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "pgsql.PgBackup"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task pgsqlBackup2(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "pgsql.PgBackup2"
    standardInput = System.in
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
    args = []
    if(project.hasProperty('arguments')){
        args(arguments.split(' '))
    }
}

task pgsqlRestore(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "pgsql.PgRestore"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task pgsqlRemoveDataFolder(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "pgsql.PgRemoveDataFolder"
    standardInput = System.in
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
    args = []
}

task pgsqlStartInstance(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "pgsql.PgStartInstance"
    standardInput = System.in
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
    args = []
    if(project.hasProperty('arguments')){
        args(arguments.split(' '))
    }
    // ./gradlew pgsqlStartInstance -Parguments="-h"
}


task pgsqlStoptInstance(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "pgsql.PgStopInstance"
    standardInput = System.in
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
    args = []
    if(project.hasProperty('arguments')){
        args(arguments.split(' '))
    }
    // ./gradlew pgsqlStoptInstance -Parguments="-h"
}


