buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.61'
}
repositories {
    jcenter()
    maven { url "https://dl.bintray.com/kotlin/ktor" }
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}
def ktor_version = '1.1.3'
def logback_version = '1.2.3'

kotlin {
    jvm()
    js {
        browser {
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation files('libs/src2abs-0.1-jar-with-dependencies.jar')

                implementation "io.ktor:ktor-server-netty:$ktor_version"
                implementation "io.ktor:ktor-html-builder:$ktor_version"
                implementation "ch.qos.logback:logback-classic:$logback_version"

                implementation 'org.eclipse.jgit:org.eclipse.jgit:5.4.2.201908231537-r'
                implementation 'com.github.javaparser:javaparser-core:3.15.1'
                implementation 'com.h2database:h2:1.4.200'
                implementation 'org.jetbrains.exposed:exposed:0.17.6'
                implementation "org.jetbrains.kotlin:kotlin-script-runtime:1.3.60"
                implementation 'com.google.code.gson:gson:2.8.6'
//                implementation 'org.webjars.bower:diff2html:2.11.2'
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
    }
}

jvmJar {
    dependsOn(jsBrowserWebpack)
    from(new File(jsBrowserWebpack.entry.name, jsBrowserWebpack.outputPath))
}

task step2(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.MainKt"
    //jvmArgs = ['-Xms1g', '-Xmx8g']
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task showdatabase(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.PersistenceKt"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task oom(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.utils.OOMKt"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}

task guinea(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.utils.GuineaKt"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}

task removedb(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.MainRemoveDbKt"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task clone(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.MainCloneKt"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task removeCheckout(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.MainRemoveCheckoutKt"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task redoFailed(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.MainRedoFailedKt"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task repoStats(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.MainRepoStatsKt"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task updateDbStats(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.MainUpdateDbStatsKt"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}

task MainGenDataset1(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.MainGenDataset1"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task MainGenDataset2(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.MainGenDataset2"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task MainDiff1(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.MainDiff1"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}
task MainDiff2(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "satd.step2.MainDiff2"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
}